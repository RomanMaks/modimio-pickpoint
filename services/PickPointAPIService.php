<?php

namespace app\services;

use app\models\Token;
use yii\helpers\Json;
use yii\httpclient\Client;
use yii\httpclient\Response;

/**
 * Сервис по работе с API PickPoint
 *
 * Class PickPointService
 * @package app\services
 */
class PickPointAPIService
{
    /** @var Client $client */
    protected $client;

    /** @var string $sessionId */
    protected $sessionId;

    /** @var array Коды ошибок */
    protected const ERROR_CODES = [
        '-2001' => 'Ошибка сервера. Попробуйте повторить запрос.',
        '-2002' => 'Отправление не может быть зарегестрировано для данного постамата.',
        '-2003' => 'Прием отправлений в постамат в данный момент приостановлен.',
        '-2004' => 'Для данного типа отправления сумма не может быть нулевой.',
        '-2005' => 'Для данного типа отправления сумма должна быть нулевой.',
        '-2006' => 'Ошибка генерации штрихкода.',
        '-2007' => 'Некорректный штрихкод.',
        '-2008' => 'Место с таким штрихкодом уже существует.',
        '-2009' => 'Неверный номер договора или договор заблокирован.',
        '-2010' => 'Заказ на вызов курьера на указаный день уже существует, обратитесь к менеджерам.',
        '-2011' => 'В постамате нет подходящей ячейки.',
        '-2012' => 'Для данного типа отправления должны быть указаны размеры.',
        '-2013' => 'Пароль или логин не верный.',
        '-2014' => 'Нет действительной сессии с таким номером.',
        '-2015' => 'Нет инвойса с таким номером для данного клиента.',
        '-2016' => 'Нет отправлений с указанными номерами для данного клиента.',
        '-2017' => 'Нет информации для авторизованного клиента по указанным параметрам.',
        '-2018' => 'Курьер не может быть вызван на указанную дату.',
        '-2019' => 'Курьер не может быть вызван на указанную дату/время для данного региона.',
        '-2020' => 'Курьер не может быть вызван на указанное время.',
        '-2021' => 'Нет вызова курьера с данным номером.',
        '-2022' => 'Нет указаного города или город указан неверно.',
        '-2023' => 'Возможно неверный формат email.',
        '-2024' => 'Возможно неверный формат телефона.',
        '-2025' => 'Неверный формат даты.',
        '-2026' => 'При абонентском обслуживании тип сдачи отправления только "Вызов курьера".',
        '-2027' => 'При абонентском обслуживании тип оплаты только "Предоплата".',
        '-2028' => 'Тип оплаты только "Предоплата".',
        '-2029' => 'Все отправления в реестре должны быть одного типа.',
        '-2030' => 'Не все отправления находятся в статусе "Зарегистрировано"',
        '-2031' => 'Контракты нескольких отправлений не совпадают.',
        '-2032' => 'Контракты указанных отправлений не соответствуют оператору текущей сессии.',
        '-2033' => 'Указанный контракт не соответствует оператору текущей сессии.',
        '-2034' => 'Нет пункта выдачи с указанным номером.',
        '-2035' => 'Не заполнено значение контактного лица.',
        '-2036' => 'Неверный формат запроса.',
        '-2037' => 'Превышена допустимая длинна поля.',
        '-2038' => 'Попробуйте повторить запрос еще раз.',
        '-2039' => 'Телефон является обязательным полем в данном запросе.',
        '-2040' => 'Описание вложимого является обязательным полем.',
        '-2041' => 'Нет реестра по указанному запросу.',
        '-2042' => 'Нет отправления по указанному запросу.',
        '-2043' => 'Не указан тип отправления.',
        '-2044' => 'Не указан тип сдачи отправления.',
        '-2045' => 'Имя получателя обязательное поле.',
        '-2046' => 'Отправление с указанным номером присвойки уже существует.',
        '-2047' => 'Запрос содержит дублирующие номера присвоек вложимого или отправление с указанным номером присвойки',
        '-2048' => 'Не указан ИКН.',
        '-2049' => 'Отправление находится в статусе отличном от "Получено".',
        '-2050' => 'Функция регистрация возвратной накладной данному оператору не доступна.',
        '-2051' => 'Не найден адрес возврата.',
        '-2052' => 'Данному оператору не доступны функции агрегатора.',
        '-2053' => 'Не все поля заполнены.',
        '-2054' => 'Субклиента с указанным номером не зарегистрировано.',
        '-2055' => 'Для данного клиента субклиенты не найдены.',
        '-2056' => 'Клиент с указанным номером уже зарегистрирован.',
        '-2057' => 'Должно быть указано хотя бы одно вложимое.',
        '-2058' => 'Для данного оператора отсутствует соответствующая ему клиентская информация.',
        '-2059' => 'Отправление не найдено.',
        '-2060' => 'Неверное значение PostageType.',
        '-2061' => 'Неверное значение GettingType.',
        '-2062' => 'Не указан номер телефона получателя.',
        '-2063' => 'Настройки контракта не разрешают передачу номера отправления.',
        '-2064' => 'Отправление с указанным номером уже существует.',
        '-2065' => 'Запрос содержит дублирующие штрихкоды вложимых.',
        '-2066' => 'Длина штрихкода не соответствует требованию. Необходимо 12 символов.',
        '-2067' => 'Адрес возврата указан не полностью.',
        '-2068' => 'Сумма за отправление не может быть отрицательной.',
        '-2069' => 'Неверный формат телефона.',
        '-2070' => 'Добавление собственного кода доступа запрещено.',
        '-2071' => 'Непредвиденная ошибка.',
        '-2072' => 'Настройки контракта не разрешают данную операцию.',
        '-2073' => 'По указанным параметрам информации не найдено.',
        '-2074' => 'Отправление не соответствует номеру телефона.',
        '-2075' => 'Ошибка продления хранения.',
        '-2076' => 'Ошибка при расчете тарифа. Попробуйте повторить запрос позже.',
        '-2077' => 'Отправление не принадлежит учетной записи.',
        '-2078' => 'Статус отправления не позволяет переадресацию.',
        '-2079' => 'Переадресация возможна в рамках одной области/края/республики!',
        '-2080' => 'Переадресация в статусе "Выдано курьеру" возможна только, если отправление идет на АПТ!',
        '-2081' => 'Баннеры не найдены.',
        '-2082' => 'Не указан город, либо указан неверно или города нет в списке обслуживаемых, свяжитесь с менеджером.',
        '-2090' => 'Зона обслуживания указана неверно.',
    ];

    /**
     * PickPointAPIService constructor.
     *
     * @throws \Exception
     */
    public function __construct()
    {
        $this->client = new Client([
            'baseUrl' => \Yii::$app->params['pickpoint']['url'],
        ]);

        $token = Token::findOne(['service' => self::class]);
        if (empty($token) ||
            (new \DateTime) > (new \DateTime($token->issued_at))->add(new \DateInterval('P1D'))) {
            $this->refresh();
        } else {
            $this->sessionId = $token->session_id;
        }
    }

    /**
     * Отправка запроса
     *
     * @param string $url
     * @param array $content
     * @param string $method
     *
     * @return Response
     *
     * @throws \Exception
     */
    protected function sendRequest(string $url, array $content, string $method = 'POST'): Response
    {
        try {
            $response = $this->client->createRequest()
                ->setMethod($method)
                ->setUrl($url)
                ->addHeaders(['Content-Type' => 'application/json'])
                ->setContent(Json::encode($content))
                ->send();
        } catch (\Throwable $exception) {
            \Yii::error($exception->getMessage());
            throw new \Exception($exception->getMessage());
        }

        if (!$response->isOk) {
            \Yii::error($response->getContent());
            throw new \Exception($response->getContent(), $response->getStatusCode());
        }

        return $response;
    }

    /**
     * Обновить токен
     *
     * @throws \Exception
     */
    protected function refresh()
    {
        $token = Token::findOne(['service' => self::class]);

        $this->sessionId = $this->getSession();

        if (empty($token)) {
            $token = new Token;
            $token->service = self::class;
        }

        $token->session_id = $this->sessionId;
        $token->issued_at = date('Y-m-d H:i:s');

        $token->save();
    }

    /**
     * Получить номер сессии для дальнейшей работы в остальных методах
     *
     * @return string
     *
     * @throws \Exception
     */
    protected function getSession(): string
    {
        $content = [
            'Login' => \Yii::$app->params['pickpoint']['login'] ?? '',
            'Password' => \Yii::$app->params['pickpoint']['password'] ?? '',
        ];

        $response = $this->sendRequest('/login', $content);

        if (!empty($response->data['ErrorMessage'])) {
            \Yii::error($response->data['ErrorMessage']);
            throw new \Exception($response->data['ErrorMessage']);
        }

        return $response->data['SessionId'];
    }
}